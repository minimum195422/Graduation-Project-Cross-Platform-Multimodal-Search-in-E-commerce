import os
import ssl
import pika
import time
import certifi
from dotenv import load_dotenv
from threading import Lock

class RabbitMQConnector:
    _instance = None
    _lock = Lock()

    def __init__(self):
        load_dotenv()
        host = os.getenv("RABBITMQ_HOST")
        vhost = os.getenv("RABBITMQ_VHOST")
        user = os.getenv("RABBITMQ_USER")
        password = os.getenv("RABBITMQ_PASSWORD")

        amqp_url = f"amqps://{user}:{password}@{host}/{vhost}"
        self.params = pika.URLParameters(amqp_url)
        ssl_context = ssl.create_default_context(cafile=certifi.where())
        self.params.ssl_options = pika.SSLOptions(ssl_context)

        self.connection = None
        self.channel = None

    @classmethod
    def get_instance(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = cls()
            return cls._instance

    def connect(self):
        if self.connection is None or self.connection.is_closed:
            self.connection = pika.BlockingConnection(self.params)
            self.channel = self.connection.channel()

    def declare_queue(self, queue: str):
        """
        ƒê·∫£m b·∫£o khai b√°o queue v·ªõi c√πng c·∫•u h√¨nh nh∆∞ ƒë√£ c√≥ s·∫µn tr√™n h·ªá th·ªëng RabbitMQ.
        """
        self.channel.queue_declare(
            queue=queue,
            durable=True,
            exclusive=False,
            auto_delete=False
        )

    def send_message(self, queue: str, message: str):
        self.connect()
        self.declare_queue(queue)
        self.channel.basic_publish(
            exchange='',
            routing_key=queue,
            body=message.encode('utf-8'),
            properties=pika.BasicProperties(delivery_mode=2)  # make message persistent
        )
        print(f"üì§ ƒê√£ g·ª≠i message t·ªõi queue '{queue}': {message}")

    def start_safe_consume(self, queue: str, process_callback):
        self.connect()
        self.declare_queue(queue)
        self.channel.basic_qos(prefetch_count=1)

        def on_message(ch, method, properties, body):
            try:
                message = body.decode('utf-8')
                print(f"üì• Nh·∫≠n message t·ª´ queue '{queue}': {message}")
                process_callback(message)
                ch.basic_ack(delivery_tag=method.delivery_tag)
                print("‚úÖ ƒê√£ x·ª≠ l√Ω v√† ACK")
            except Exception as e:
                print(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
                ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)

        self.channel.basic_consume(queue=queue, on_message_callback=on_message)

        try:
            print(f"üöÄ B·∫Øt ƒë·∫ßu ti√™u th·ª• message t·ª´ queue '{queue}'...")
            self.channel.start_consuming()
        except Exception as e:
            print(f"‚ùó Ti√™u th·ª• message d·ª´ng l·∫°i: {e}")

    def stop_consuming(self):
        if self.channel and self.channel.is_open:
            self.channel.stop_consuming()
            print("‚èπÔ∏è ƒê√£ d·ª´ng ti√™u th·ª• message t·ª´ RabbitMQ")


    def close(self):
        if self.connection and not self.connection.is_closed:
            self.connection.close()
            print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi RabbitMQ")


if __name__ == "__main__":
    connector = RabbitMQConnector.get_instance()

    product_keywords = [
        # üõçÔ∏è Th·ªùi trang & Ph·ª• ki·ªán
        "√Åo s∆° mi nam Uniqlo Oxford",
        "V√°y maxi Zara hoa nh√≠",
        "Qu·∫ßn jeans n·ªØ Levi‚Äôs 501",
        "√Åo kho√°c bomber nam Adidas Originals",
        "Gi√†y sneaker Nike Air Force 1",
        "T√∫i x√°ch COACH Tabby Shoulder Bag",
        "K√≠nh m√°t Ray-Ban Jackie Ohh II",
        "ƒê·ªìng h·ªì Casio G-Shock GA-2100",
        "Th·∫Øt l∆∞ng da nam Lacoste",
        "M≈© l∆∞·ª°i trai MLB New York Yankees",

        # üè† ƒê·ªì gia d·ª•ng & N·ªôi th·∫•t
        "M√°y h√∫t b·ª•i Dyson V12 Detect Slim",
        "M√°y l·ªçc kh√¥ng kh√≠ Xiaomi Air Purifier 4 Pro",
        "N·ªìi chi√™n kh√¥ng d·∫ßu Philips HD9650",
        "M√°y pha c√† ph√™ Delonghi Dedica EC685",
        "B·ªô chƒÉn ga g·ªëi Everon Modal 100%",
        "Gh·∫ø c√¥ng th√°i h·ªçc Sihoo M57",
        "ƒê√®n ng·ªß th√¥ng minh Xiaomi Mi Bedside Lamp 2",
        "M√°y r·ª≠a b√°t Bosch Serie 4 SMS46MI05E",
        "Qu·∫°t ƒëi·ªÅu h√≤a Kangaroo KG50F58",
        "B·∫øp t·ª´ ƒë√¥i Sunhouse SHB9102",

        # üíª C√¥ng ngh·ªá & Thi·∫øt b·ªã ƒëi·ªán t·ª≠
        "Laptop Apple MacBook Air M2 13 inch",
        "ƒêi·ªán tho·∫°i Samsung Galaxy S23 Ultra",
        "Tai nghe kh√¥ng d√¢y Sony WF-1000XM5",
        "M√°y t√≠nh b·∫£ng iPad Pro 11 inch M2",
        "M√†n h√¨nh LG UltraFine 27UN850-W 4K",
        "B√†n ph√≠m c∆° Keychron K2 V2",
        "Chu·ªôt Logitech MX Master 3S",
        "·ªî c·ª©ng di ƒë·ªông Seagate Backup Plus 2TB",
        "M√°y ·∫£nh Sony Alpha A7 III",
        "Loa Bluetooth JBL Charge 5",

        # üß¥ L√†m ƒë·∫πp & ChƒÉm s√≥c c√° nh√¢n
        "Kem ch·ªëng n·∫Øng La Roche-Posay Anthelios SPF 50",
        "N∆∞·ªõc hoa Chanel Coco Mademoiselle EDP",
        "M√°y r·ª≠a m·∫∑t Foreo Luna 3",
        "Son m√¥i MAC Matte Lipstick m√†u Ruby Woo",
        "Kem d∆∞·ª°ng ·∫©m CeraVe Moisturizing Cream",
        "M√°y du·ªói t√≥c Dyson Corrale",
        "Tinh ch·∫•t d∆∞·ª°ng da The Ordinary Niacinamide 10% + Zinc 1%",
        "N∆∞·ªõc t·∫©y trang Bioderma Sensibio H2O",
        "M√°y s·∫•y t√≥c Panasonic EH-NA98",
        "B·ªô c·ªç trang ƒëi·ªÉm Real Techniques Everyday Essentials",

        # üß∏ M·∫π & B√©
        "Xe ƒë·∫©y em b√© Aprica Luxuna Light",
        "Gh·∫ø ƒÉn d·∫∑m Joie Multiply 6in1",
        "M√°y h√¢m s·ªØa Fatzbaby FB3003SL",
        "B√¨nh s·ªØa Comotomo 250ml",
        "T√£ d√°n Merries size M",
        "Kem ch·ªëng hƒÉm Bepanthen 100g",
        "M√°y h√∫t s·ªØa Medela Pump In Style Advanced",
        "N√¥i ƒëi·ªán Autoru Eco 2025",
        "B·ªô ƒë·ªì ch∆°i Lego Duplo My First Number Train",
        "Y·∫øm ƒÉn silicon ch·ªëng th·∫•m n∆∞·ªõc BabyBj√∂rn",

        # üèãÔ∏è‚Äç‚ôÇÔ∏è Th·ªÉ thao & D√£ ngo·∫°i
        "Gi√†y ch·∫°y b·ªô Nike ZoomX Vaporfly Next%",
        "Balo leo n√∫i The North Face Borealis",
        "ƒê·ªìng h·ªì th·ªÉ thao Garmin Forerunner 255",
        "Th·∫£m yoga Liforme Original Mat",
        "B√¨nh n∆∞·ªõc gi·ªØ nhi·ªát Thermos 1L",
        "L·ªÅu c·∫Øm tr·∫°i Naturehike Cloud-Up 2",
        "G·∫≠y trekking Black Diamond Trail Back",
        "K√≠nh b∆°i Speedo Vanquisher 2.0",
        "V·ª£t c·∫ßu l√¥ng Yonex Astrox 99",
        "B·ªô t·∫° tay Bowflex SelectTech 552",

        # üç≥ Nh√† b·∫øp & D·ª•ng c·ª• n·∫•u ƒÉn
        "N·ªìi c∆°m ƒëi·ªán cao t·∫ßn Zojirushi NP-HCC10XH",
        "M√°y xay sinh t·ªë Vitamix E310",
        "B·ªô n·ªìi inox 5 m√≥n Fissler Original-Profi Collection",
        "Ch·∫£o ch·ªëng d√≠nh Tefal Titanium Excellence 28cm",
        "L√≤ n∆∞·ªõng ƒëi·ªán Sharp EO-A384RCSV-BK",
        "M√°y √©p ch·∫≠m Hurom H-AA-BBE17",
        "B·ªô dao nh√† b·∫øp Zwilling Twin Pollux 7 m√≥n",
        "M√°y l√†m s·ªØa h·∫°t Ranbem 769S",
        "M√°y l√†m b√°nh m√¨ Panasonic SD-P104",
        "M√°y pha c√† ph√™ Espresso Breville BES870XL",

        # üìö S√°ch & VƒÉn ph√≤ng ph·∫©m
        "S√°ch 'ƒê·∫Øc nh√¢n t√¢m' - Dale Carnegie",
        "S√°ch 'Nh√† gi·∫£ kim' - Paulo Coelho",
        "B√∫t m√°y Lamy Safari Fountain Pen",
        "S·ªï tay Moleskine Classic Notebook A5",
        "Balo laptop ch·ªëng s·ªëc Samsonite Tectonic Lifestyle",
        "Gh·∫ø vƒÉn ph√≤ng c√¥ng th√°i h·ªçc Herman Miller Aeron",
        "ƒê√®n b√†n h·ªçc LED Xiaomi Mi LED Desk Lamp 1S",
        "M√°y in ƒëa ch·ª©c nƒÉng Canon PIXMA G3010",
        "B√∫t bi Parker Jotter Stainless Steel",
        "M√°y h·ªßy t√†i li·ªáu Silicon PS-800C",

        # üê∂ Th√∫ c∆∞ng
        "Th·ª©c ƒÉn cho ch√≥ Royal Canin Maxi Adult 15kg",
        "Th·ª©c ƒÉn cho m√®o Whiskas Adult 1.2kg",
        "L·ªìng v·∫≠n chuy·ªÉn ch√≥ m√®o IRIS 500",
        "B√†n c√†o m√≥ng cho m√®o Catit Style",
        "D√¢y d·∫Øt ch√≥ t·ª± ƒë·ªông Flexi Classic M 5m",
        "B√°t ƒÉn ch·ªëng tr∆∞·ª£t Inox Petkit Fresh",
        "M√°y l·ªçc n∆∞·ªõc cho th√∫ c∆∞ng Xiaomi Petkit Eversweet 2",
        "ƒê·ªì ch∆°i cho ch√≥ Kong Classic Medium",
        "S·ªØa t·∫Øm cho ch√≥ Bio-Groom Protein Lanolin",
        "B·ªô c·∫Øt m√≥ng cho th√∫ c∆∞ng Trixie Deluxe",

        # üéÆ Gi·∫£i tr√≠ & Thi·∫øt b·ªã ch∆°i game
        "M√°y ch∆°i game Sony PlayStation 5",
        "M√°y ch∆°i game Nintendo Switch OLED",
        "Tay c·∫ßm Xbox Wireless Controller",
        "Tai nghe ch∆°i game Razer BlackShark V2",
        "B√†n ph√≠m c∆° ch∆°i game SteelSeries Apex Pro",
        "Chu·ªôt ch∆°i game Logitech G502 HERO",
        "M√†n h√¨nh ch∆°i game ASUS ROG Swift PG259QN 360Hz",
        "Gh·∫ø ch∆°i game Secretlab TITAN Evo 2022",
        "Webcam Logitech C920 HD Pro",
        "Micro thu √¢m Blue Yeti USB Microphone"
    ]

    for name in product_keywords:
        connector.send_message("keywords", name)
        time.sleep(0.1)

    connector.close()
    
    

# if __name__ == "__main__":
#     connector = RabbitMQConnector.get_instance()

#     # G·ª≠i 2 t·ª´ kho√°, 1 b√¨nh th∆∞·ªùng, 1 c√≥ ch·ªØ 'l·ªói' ƒë·ªÉ test l·ªói x·ª≠ l√Ω
#     connector.send_message("keywords", "√°o thun nam")
#     connector.send_message("keywords", "√°o thun l·ªói")



#     # test_consume_success.py
# import time
# from rabbitmq_connector import RabbitMQConnector

# def process_success(message):
#     print(f"üîß ƒêang x·ª≠ l√Ω (th√†nh c√¥ng): {message}")
#     time.sleep(5)
#     print(f"‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω th√†nh c√¥ng: {message}")

# if __name__ == "__main__":
#     connector = RabbitMQConnector.get_instance()
#     connector.start_safe_consume("keywords", process_success)



# # test_consume_fail.py
# import time
# from rabbitmq_connector import RabbitMQConnector

# def process_with_error(message):
#     print(f"üîß ƒêang x·ª≠ l√Ω (c√≥ th·ªÉ l·ªói): {message}")
#     time.sleep(5)
#     if "l·ªói" in message:
#         raise ValueError("Gi·∫£ l·∫≠p l·ªói x·ª≠ l√Ω")
#     print(f"‚úÖ X·ª≠ l√Ω xong b√¨nh th∆∞·ªùng: {message}")

# if __name__ == "__main__":
#     connector = RabbitMQConnector.get_instance()
#     connector.start_safe_consume("keywords", process_with_error)
